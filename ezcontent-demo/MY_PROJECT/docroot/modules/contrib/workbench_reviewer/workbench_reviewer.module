<?php

/**
 * @file
 * Workbench Reviewer module file.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Implements hook_entity_bundle_field_info().
 */
function workbench_reviewer_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
  $moderation_info = Drupal::service('content_moderation.moderation_information');

  // Only add the reviewer field for bundles that are under moderation.
  if ($moderation_info->shouldModerateEntitiesOfBundle($entity_type, $bundle)) {
    $definitions['workbench_reviewer'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Reviewer'))
      ->setDescription(t('A user to assign this piece of content to for review.'))
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'region' => 'hidden',
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'entity_reference_autocomplete',
        'weight' => -100,
        'settings' => [
          'size' => 60,
          'match_operator' => 'CONTAINS',
          'placeholder' => '',
        ],
      ])
      ->setSetting('target_type', 'user')
      ->setSetting('handler', 'default');
    return $definitions;
  }
}

/**
 * Implements hook_entity_field_storage_info().
 */
function workbench_reviewer_entity_field_storage_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'node') {
    $definitions['workbench_reviewer'] = BaseFieldDefinition::create('entity_reference')
      ->setName('workbench_reviewer')
      ->setLabel(t('Reviewer'))
      ->setDescription(t('A user to assign this piece of content to for review'))
      ->setTargetEntityTypeId($entity_type->id())
      ->setRevisionable(TRUE)
      ->setSetting('target_type', 'user');
    return $definitions;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function workbench_reviewer_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Create a workflow section in the right "advanced" sidebar.
  $form['workflow'] = [
    '#type' => 'details',
    '#title' => t('Workflow'),
    '#group' => 'advanced',
    '#attributes' => [
      'class' => ['node-form-options'],
    ],
    '#attached' => [
      'library' => ['node/drupal.node'],
    ],
    '#weight' => 100,
    '#optional' => FALSE,
  ];

  // Move the Workbench Reviewer field to a new "Workflow" tab.
  $form['revision_log']['#group'] = 'workflow';
  $form['workbench_reviewer']['#group'] = 'workflow';
}

/**
 * Implements hook_entity_presave().
 */
function workbench_reviewer_entity_presave(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node') {
    $node = $entity;
  }
}

/**
 * Implements hook_token_info_alter().
 */
function workbench_reviewer_token_info_alter(&$info) {
  foreach (\Drupal::entityTypeManager()->getDefinitions() as $entity_type_id => $entity_type) {
    if (!$entity_type->entityClassImplements('\Drupal\Core\Entity\ContentEntityInterface')) {
      continue;
    }

    $moderation_info = \Drupal::service('content_moderation.moderation_information');
    if (!$moderation_info->canModerateEntitiesOfEntityType($entity_type)) {
      continue;
    }

    // Make sure a token type exists for this entity.
    $token_mapper = \Drupal::getContainer()->get('token.entity_mapper', ContainerInterface::NULL_ON_INVALID_REFERENCE);
    $token_type = $token_mapper ? $token_mapper->getTokenTypeForEntityType($entity_type_id) : $entity_type_id;
    if (empty($token_type) || !isset($info['types'][$token_type])) {
      continue;
    }

    $info['tokens'][$token_type]['workbench_reviewer'] = [
      'name' => 'Reviewer',
      'module' => 'workbench_reviewer',
      'type' => 'user',
    ];
  }
}

/**
 * Implements hook_tokens().
 */
function workbench_reviewer_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  // Entity tokens.
  if ($type != 'entity' || empty($data['entity_type']) || empty($data['entity']) || empty($data['token_type'])) {
    return $replacements;
  }

  /* @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $data['entity'];
  if (!($entity instanceof ContentEntityInterface)) {
    return $replacements;
  }

  if (!$entity->hasField('workbench_reviewer')) {
    return $replacements;
  }

  $account = NULL;
  if (!$entity->workbench_reviewer->isEmpty()) {
    $account = $entity->workbench_reviewer
      ->first()
      ->get('entity')
      ->getTarget()
      ->getValue();
  }

  foreach ($tokens as $name => $original) {
    if ($name == 'workbench_reviewer') {
      $replacements[$original] = $account ? $account->label() : '';

      if ($account) {
        $bubbleable_metadata->addCacheableDependency($account);
      }
    }
  }

  if ($field_tokens = \Drupal::token()->findWithPrefix($tokens, 'workbench_reviewer')) {
    $field_data = ['user' => $account];
    $replacements += \Drupal::token()->generate('user', $field_tokens, $field_data, $options, $bubbleable_metadata);
  }

  return $replacements;
}
